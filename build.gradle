plugins {
    id "java-library"
    id "signing"
    id "maven-publish"
    id "jacoco"
    id "org.sonarqube" version "5.1.0.4882"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.github.ben-manes.versions" version "0.51.0"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.hamcrest:hamcrest:3.0'
}

group 'org.itsallcode'
version = '0.7.0'

java {
    toolchain {
        def javaVersion = project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : 11
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

testing {
    suites {
        test {
            var junitVersion = '5.10.2'
            useJUnitJupiter(junitVersion)
            targets {
                all {
                    testTask.configure {
                        systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'
                    }
                }
            }
        }
    }
}

javadoc {
    failOnError = true
    options.addBooleanOption('html5', true)
    // Workaround for https://github.com/gradle/gradle/issues/2354
    options.addStringOption('Xwerror', '-quiet')
    options.addStringOption('Xdoclint:all', '-quiet')
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    // module-info.java:8: warning: requires directive for an automatic module org.hamcrest
    options.compilerArgs << '-Xlint:-requires-automatic'
    // module-info.java:8: warning: requires transitive directive for an automatic module org.hamcrest
    options.compilerArgs << '-Xlint:-requires-transitive-automatic'
    options.compilerArgs << '-Werror'
    options.encoding = 'UTF-8'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "itsallcode"
    }
}

def getOptionalProperty(String name) {
    if(project.hasProperty(name)) {
        return project.property(name)
    }
    logger.info("Project property '${name}' not available. Please it to ~/.gradle/gradle.properties")
    return null
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Hamcrest auto-matcher'
                description = 'Automatic hamcrest matcher for model classes'
                url = 'https://github.com/itsallcode/hamcrest-auto-matcher'

                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kaklakariada'
                        name = 'Christoph'
                        email = 'kaklakariada@chp1.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/itsallcode/hamcrest-auto-matcher.git'
                    developerConnection = 'scm:git:https://github.com/itsallcode/hamcrest-auto-matcher.git'
                    url = 'https://github.com/itsallcode/hamcrest-auto-matcher'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = false
            credentials(PasswordCredentials) {
                username = getOptionalProperty("ossrhUsername")
                password = getOptionalProperty("ossrhPassword")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


nexusPublishing {
    packageGroup = project.group
    repositories {
        sonatype {
            stagingProfileId = "546ea6ce74787e"
            username = getOptionalProperty("ossrhUsername")
            password = getOptionalProperty("ossrhPassword")
        }
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}
